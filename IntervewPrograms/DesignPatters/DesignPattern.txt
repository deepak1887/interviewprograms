1. Design patterns(what and why)
	a. Design pattern in object oriented programming world helps the developers to make a 
	   better software design.
	b. Design pattern provide solutions to real world software application design problems 
	   or in application development.
	c. Design pattern are about applying reusable design and interactions of objects.
	d. Design pattern provide flexible solutions to solve common design problem in real world.
	e. Writing the code with design patterns will make your applications more Reliable, Scalable
	   and maintainable.
	f. A pattern is a recurring solution to a problem in a context.
2. Design Pattern History
3. Types of design pattern

4. Design pattern classification
	a. Creational (provides mechanism of various object creation, reducing code and increasing 
					flexibility)
					1. Abstract Factory - Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.
					2. Builder - Builder is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.
					3. Factory method - Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.
					4. Prototype - Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes.
					5. Singleton - Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.
	b. Structural (create and implement flexible and efficient structures and how to assemble 
					classes into larger structure)
					1. Adapter - Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
					2. Bridge - Bridge is a structural design pattern that lets you split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—which can be developed independently of each other.
					3. Composite - Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.
					4. Decotator - Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.
					5. Facade - Facade is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes.
					6. Flyweight - Flyweight is a structural design pattern that lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object.
					7. Proxy - Proxy is a structural design pattern that lets you provide a substitute or placeholder for another object. A proxy controls access to the original object, allowing you to perform something either before or after the request gets through to the original object.
	c. Behavioral (Object behaviour and responsibilities between objects are very important,
					concerned with algorithms)
					1. Chain
					2. Command - Command is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you pass requests as a method arguments, delay or queue a request’s execution, and support undoable operations.
					3. Interpreter
					4. Iterator
					5. Mediator - The Mediator makes it easy to modify, extend and reuse individual components because they’re no longer dependent on the dozens of other classes.
					6. Memento
					7. Observer
					8. State
					9. Strategy
					10. Template Method
					11. Visitor
5. When to apply
6. For basic understanding about the object oriented concepts:
	1. Abstraction, Inheritance, Polymorphism, Encapsulation
	2. Interfaces, Classes, Abstract classes

Rajeev Srivastava -- Natwest